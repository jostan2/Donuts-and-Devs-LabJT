{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory() : typeof define === 'function' && define.amd ? define(factory) : factory();\n})(this, function () {\n  'use strict';\n  /**\n   * Applies the :focus-visible polyfill at the given scope.\n   * A scope in this case is either the top-level Document or a Shadow Root.\n   *\n   * @param {(Document|ShadowRoot)} scope\n   * @see https://github.com/WICG/focus-visible\n   */\n\n  function applyFocusVisiblePolyfill(scope) {\n    var hadKeyboardEvent = true;\n    var hadFocusVisibleRecently = false;\n    var hadFocusVisibleRecentlyTimeout = null;\n    var inputTypesWhitelist = {\n      text: true,\n      search: true,\n      url: true,\n      tel: true,\n      email: true,\n      password: true,\n      number: true,\n      date: true,\n      month: true,\n      week: true,\n      time: true,\n      datetime: true,\n      'datetime-local': true\n    };\n    /**\n     * Helper function for legacy browsers and iframes which sometimes focus\n     * elements like document, body, and non-interactive SVG.\n     * @param {Element} el\n     */\n\n    function isValidFocusTarget(el) {\n      if (el && el !== document && el.nodeName !== 'HTML' && el.nodeName !== 'BODY' && 'classList' in el && 'contains' in el.classList) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Computes whether the given element should automatically trigger the\n     * `focus-visible` class being added, i.e. whether it should always match\n     * `:focus-visible` when focused.\n     * @param {Element} el\n     * @return {boolean}\n     */\n\n\n    function focusTriggersKeyboardModality(el) {\n      var type = el.type;\n      var tagName = el.tagName;\n\n      if (tagName == 'INPUT' && inputTypesWhitelist[type] && !el.readOnly) {\n        return true;\n      }\n\n      if (tagName == 'TEXTAREA' && !el.readOnly) {\n        return true;\n      }\n\n      if (el.isContentEditable) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Add the `focus-visible` class to the given element if it was not added by\n     * the author.\n     * @param {Element} el\n     */\n\n\n    function addFocusVisibleClass(el) {\n      if (el.classList.contains('focus-visible')) {\n        return;\n      }\n\n      el.classList.add('focus-visible');\n      el.setAttribute('data-focus-visible-added', '');\n    }\n    /**\n     * Remove the `focus-visible` class from the given element if it was not\n     * originally added by the author.\n     * @param {Element} el\n     */\n\n\n    function removeFocusVisibleClass(el) {\n      if (!el.hasAttribute('data-focus-visible-added')) {\n        return;\n      }\n\n      el.classList.remove('focus-visible');\n      el.removeAttribute('data-focus-visible-added');\n    }\n    /**\n     * If the most recent user interaction was via the keyboard;\n     * and the key press did not include a meta, alt/option, or control key;\n     * then the modality is keyboard. Otherwise, the modality is not keyboard.\n     * Apply `focus-visible` to any current active element and keep track\n     * of our keyboard modality state with `hadKeyboardEvent`.\n     * @param {KeyboardEvent} e\n     */\n\n\n    function onKeyDown(e) {\n      if (e.metaKey || e.altKey || e.ctrlKey) {\n        return;\n      }\n\n      if (isValidFocusTarget(scope.activeElement)) {\n        addFocusVisibleClass(scope.activeElement);\n      }\n\n      hadKeyboardEvent = true;\n    }\n    /**\n     * If at any point a user clicks with a pointing device, ensure that we change\n     * the modality away from keyboard.\n     * This avoids the situation where a user presses a key on an already focused\n     * element, and then clicks on a different element, focusing it with a\n     * pointing device, while we still think we're in keyboard modality.\n     * @param {Event} e\n     */\n\n\n    function onPointerDown(e) {\n      hadKeyboardEvent = false;\n    }\n    /**\n     * On `focus`, add the `focus-visible` class to the target if:\n     * - the target received focus as a result of keyboard navigation, or\n     * - the event target is an element that will likely require interaction\n     *   via the keyboard (e.g. a text box)\n     * @param {Event} e\n     */\n\n\n    function onFocus(e) {\n      // Prevent IE from focusing the document or HTML element.\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {\n        addFocusVisibleClass(e.target);\n      }\n    }\n    /**\n     * On `blur`, remove the `focus-visible` class from the target.\n     * @param {Event} e\n     */\n\n\n    function onBlur(e) {\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (e.target.classList.contains('focus-visible') || e.target.hasAttribute('data-focus-visible-added')) {\n        // To detect a tab/window switch, we look for a blur event followed\n        // rapidly by a visibility change.\n        // If we don't see a visibility change within 100ms, it's probably a\n        // regular focus change.\n        hadFocusVisibleRecently = true;\n        window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n        hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n          hadFocusVisibleRecently = false;\n          window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n        }, 100);\n        removeFocusVisibleClass(e.target);\n      }\n    }\n    /**\n     * If the user changes tabs, keep track of whether or not the previously\n     * focused element had .focus-visible.\n     * @param {Event} e\n     */\n\n\n    function onVisibilityChange(e) {\n      if (document.visibilityState == 'hidden') {\n        // If the tab becomes active again, the browser will handle calling focus\n        // on the element (Safari actually calls it twice).\n        // If this tab change caused a blur on an element with focus-visible,\n        // re-apply the class when the user switches back to the tab.\n        if (hadFocusVisibleRecently) {\n          hadKeyboardEvent = true;\n        }\n\n        addInitialPointerMoveListeners();\n      }\n    }\n    /**\n     * Add a group of listeners to detect usage of any pointing devices.\n     * These listeners will be added when the polyfill first loads, and anytime\n     * the window is blurred, so that they are active when the window regains\n     * focus.\n     */\n\n\n    function addInitialPointerMoveListeners() {\n      document.addEventListener('mousemove', onInitialPointerMove);\n      document.addEventListener('mousedown', onInitialPointerMove);\n      document.addEventListener('mouseup', onInitialPointerMove);\n      document.addEventListener('pointermove', onInitialPointerMove);\n      document.addEventListener('pointerdown', onInitialPointerMove);\n      document.addEventListener('pointerup', onInitialPointerMove);\n      document.addEventListener('touchmove', onInitialPointerMove);\n      document.addEventListener('touchstart', onInitialPointerMove);\n      document.addEventListener('touchend', onInitialPointerMove);\n    }\n\n    function removeInitialPointerMoveListeners() {\n      document.removeEventListener('mousemove', onInitialPointerMove);\n      document.removeEventListener('mousedown', onInitialPointerMove);\n      document.removeEventListener('mouseup', onInitialPointerMove);\n      document.removeEventListener('pointermove', onInitialPointerMove);\n      document.removeEventListener('pointerdown', onInitialPointerMove);\n      document.removeEventListener('pointerup', onInitialPointerMove);\n      document.removeEventListener('touchmove', onInitialPointerMove);\n      document.removeEventListener('touchstart', onInitialPointerMove);\n      document.removeEventListener('touchend', onInitialPointerMove);\n    }\n    /**\n     * When the polfyill first loads, assume the user is in keyboard modality.\n     * If any event is received from a pointing device (e.g. mouse, pointer,\n     * touch), turn off keyboard modality.\n     * This accounts for situations where focus enters the page from the URL bar.\n     * @param {Event} e\n     */\n\n\n    function onInitialPointerMove(e) {\n      // Work around a Safari quirk that fires a mousemove on <html> whenever the\n      // window blurs, even if you're tabbing out of the page. ¯\\_(ツ)_/¯\n      if (e.target.nodeName && e.target.nodeName.toLowerCase() === 'html') {\n        return;\n      }\n\n      hadKeyboardEvent = false;\n      removeInitialPointerMoveListeners();\n    } // For some kinds of state, we are interested in changes at the global scope\n    // only. For example, global pointer input, global key presses and global\n    // visibility change should affect the state at every scope:\n\n\n    document.addEventListener('keydown', onKeyDown, true);\n    document.addEventListener('mousedown', onPointerDown, true);\n    document.addEventListener('pointerdown', onPointerDown, true);\n    document.addEventListener('touchstart', onPointerDown, true);\n    document.addEventListener('visibilitychange', onVisibilityChange, true);\n    addInitialPointerMoveListeners(); // For focus and blur, we specifically care about state changes in the local\n    // scope. This is because focus / blur events that originate from within a\n    // shadow root are not re-dispatched from the host element if it was already\n    // the active element in its own scope:\n\n    scope.addEventListener('focus', onFocus, true);\n    scope.addEventListener('blur', onBlur, true); // We detect that a node is a ShadowRoot by ensuring that it is a\n    // DocumentFragment and also has a host property. This check covers native\n    // implementation and polyfill implementation transparently. If we only cared\n    // about the native implementation, we could just check if the scope was\n    // an instance of a ShadowRoot.\n\n    if (scope.nodeType === Node.DOCUMENT_FRAGMENT_NODE && scope.host) {\n      // Since a ShadowRoot is a special kind of DocumentFragment, it does not\n      // have a root element to add a class to. So, we add this attribute to the\n      // host element instead:\n      scope.host.setAttribute('data-js-focus-visible', '');\n    } else if (scope.nodeType === Node.DOCUMENT_NODE) {\n      document.documentElement.classList.add('js-focus-visible');\n    }\n  } // It is important to wrap all references to global window and document in\n  // these checks to support server-side rendering use cases\n  // @see https://github.com/WICG/focus-visible/issues/199\n\n\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    // Make the polyfill helper globally available. This can be used as a signal\n    // to interested libraries that wish to coordinate with the polyfill for e.g.,\n    // applying the polyfill to a shadow root:\n    window.applyFocusVisiblePolyfill = applyFocusVisiblePolyfill; // Notify interested libraries of the polyfill's presence, in case the\n    // polyfill was loaded lazily:\n\n    var event;\n\n    try {\n      event = new CustomEvent('focus-visible-polyfill-ready');\n    } catch (error) {\n      // IE11 does not support using CustomEvent as a constructor directly:\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent('focus-visible-polyfill-ready', false, false, {});\n    }\n\n    window.dispatchEvent(event);\n  }\n\n  if (typeof document !== 'undefined') {\n    // Apply the polyfill to the global document, so that no JavaScript\n    // coordination is required to use the polyfill in the top-level document:\n    applyFocusVisiblePolyfill(document);\n  }\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","applyFocusVisiblePolyfill","scope","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","text","search","url","tel","email","password","number","date","month","week","time","datetime","isValidFocusTarget","el","document","nodeName","classList","focusTriggersKeyboardModality","type","tagName","readOnly","isContentEditable","addFocusVisibleClass","contains","add","setAttribute","removeFocusVisibleClass","hasAttribute","remove","removeAttribute","onKeyDown","e","metaKey","altKey","ctrlKey","activeElement","onPointerDown","onFocus","target","onBlur","window","clearTimeout","setTimeout","onVisibilityChange","visibilityState","addInitialPointerMoveListeners","addEventListener","onInitialPointerMove","removeInitialPointerMoveListeners","removeEventListener","toLowerCase","nodeType","Node","DOCUMENT_FRAGMENT_NODE","host","DOCUMENT_NODE","documentElement","event","CustomEvent","error","createEvent","initCustomEvent","dispatchEvent"],"sources":["C:/Users/javas/source/repos/Donuts and Devs LabJT/node_modules/focus-visible/dist/focus-visible.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (factory());\n}(this, (function () { 'use strict';\n\n  /**\n   * Applies the :focus-visible polyfill at the given scope.\n   * A scope in this case is either the top-level Document or a Shadow Root.\n   *\n   * @param {(Document|ShadowRoot)} scope\n   * @see https://github.com/WICG/focus-visible\n   */\n  function applyFocusVisiblePolyfill(scope) {\n    var hadKeyboardEvent = true;\n    var hadFocusVisibleRecently = false;\n    var hadFocusVisibleRecentlyTimeout = null;\n\n    var inputTypesWhitelist = {\n      text: true,\n      search: true,\n      url: true,\n      tel: true,\n      email: true,\n      password: true,\n      number: true,\n      date: true,\n      month: true,\n      week: true,\n      time: true,\n      datetime: true,\n      'datetime-local': true\n    };\n\n    /**\n     * Helper function for legacy browsers and iframes which sometimes focus\n     * elements like document, body, and non-interactive SVG.\n     * @param {Element} el\n     */\n    function isValidFocusTarget(el) {\n      if (\n        el &&\n        el !== document &&\n        el.nodeName !== 'HTML' &&\n        el.nodeName !== 'BODY' &&\n        'classList' in el &&\n        'contains' in el.classList\n      ) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Computes whether the given element should automatically trigger the\n     * `focus-visible` class being added, i.e. whether it should always match\n     * `:focus-visible` when focused.\n     * @param {Element} el\n     * @return {boolean}\n     */\n    function focusTriggersKeyboardModality(el) {\n      var type = el.type;\n      var tagName = el.tagName;\n\n      if (tagName == 'INPUT' && inputTypesWhitelist[type] && !el.readOnly) {\n        return true;\n      }\n\n      if (tagName == 'TEXTAREA' && !el.readOnly) {\n        return true;\n      }\n\n      if (el.isContentEditable) {\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Add the `focus-visible` class to the given element if it was not added by\n     * the author.\n     * @param {Element} el\n     */\n    function addFocusVisibleClass(el) {\n      if (el.classList.contains('focus-visible')) {\n        return;\n      }\n      el.classList.add('focus-visible');\n      el.setAttribute('data-focus-visible-added', '');\n    }\n\n    /**\n     * Remove the `focus-visible` class from the given element if it was not\n     * originally added by the author.\n     * @param {Element} el\n     */\n    function removeFocusVisibleClass(el) {\n      if (!el.hasAttribute('data-focus-visible-added')) {\n        return;\n      }\n      el.classList.remove('focus-visible');\n      el.removeAttribute('data-focus-visible-added');\n    }\n\n    /**\n     * If the most recent user interaction was via the keyboard;\n     * and the key press did not include a meta, alt/option, or control key;\n     * then the modality is keyboard. Otherwise, the modality is not keyboard.\n     * Apply `focus-visible` to any current active element and keep track\n     * of our keyboard modality state with `hadKeyboardEvent`.\n     * @param {KeyboardEvent} e\n     */\n    function onKeyDown(e) {\n      if (e.metaKey || e.altKey || e.ctrlKey) {\n        return;\n      }\n\n      if (isValidFocusTarget(scope.activeElement)) {\n        addFocusVisibleClass(scope.activeElement);\n      }\n\n      hadKeyboardEvent = true;\n    }\n\n    /**\n     * If at any point a user clicks with a pointing device, ensure that we change\n     * the modality away from keyboard.\n     * This avoids the situation where a user presses a key on an already focused\n     * element, and then clicks on a different element, focusing it with a\n     * pointing device, while we still think we're in keyboard modality.\n     * @param {Event} e\n     */\n    function onPointerDown(e) {\n      hadKeyboardEvent = false;\n    }\n\n    /**\n     * On `focus`, add the `focus-visible` class to the target if:\n     * - the target received focus as a result of keyboard navigation, or\n     * - the event target is an element that will likely require interaction\n     *   via the keyboard (e.g. a text box)\n     * @param {Event} e\n     */\n    function onFocus(e) {\n      // Prevent IE from focusing the document or HTML element.\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {\n        addFocusVisibleClass(e.target);\n      }\n    }\n\n    /**\n     * On `blur`, remove the `focus-visible` class from the target.\n     * @param {Event} e\n     */\n    function onBlur(e) {\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (\n        e.target.classList.contains('focus-visible') ||\n        e.target.hasAttribute('data-focus-visible-added')\n      ) {\n        // To detect a tab/window switch, we look for a blur event followed\n        // rapidly by a visibility change.\n        // If we don't see a visibility change within 100ms, it's probably a\n        // regular focus change.\n        hadFocusVisibleRecently = true;\n        window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n        hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {\n          hadFocusVisibleRecently = false;\n          window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n        }, 100);\n        removeFocusVisibleClass(e.target);\n      }\n    }\n\n    /**\n     * If the user changes tabs, keep track of whether or not the previously\n     * focused element had .focus-visible.\n     * @param {Event} e\n     */\n    function onVisibilityChange(e) {\n      if (document.visibilityState == 'hidden') {\n        // If the tab becomes active again, the browser will handle calling focus\n        // on the element (Safari actually calls it twice).\n        // If this tab change caused a blur on an element with focus-visible,\n        // re-apply the class when the user switches back to the tab.\n        if (hadFocusVisibleRecently) {\n          hadKeyboardEvent = true;\n        }\n        addInitialPointerMoveListeners();\n      }\n    }\n\n    /**\n     * Add a group of listeners to detect usage of any pointing devices.\n     * These listeners will be added when the polyfill first loads, and anytime\n     * the window is blurred, so that they are active when the window regains\n     * focus.\n     */\n    function addInitialPointerMoveListeners() {\n      document.addEventListener('mousemove', onInitialPointerMove);\n      document.addEventListener('mousedown', onInitialPointerMove);\n      document.addEventListener('mouseup', onInitialPointerMove);\n      document.addEventListener('pointermove', onInitialPointerMove);\n      document.addEventListener('pointerdown', onInitialPointerMove);\n      document.addEventListener('pointerup', onInitialPointerMove);\n      document.addEventListener('touchmove', onInitialPointerMove);\n      document.addEventListener('touchstart', onInitialPointerMove);\n      document.addEventListener('touchend', onInitialPointerMove);\n    }\n\n    function removeInitialPointerMoveListeners() {\n      document.removeEventListener('mousemove', onInitialPointerMove);\n      document.removeEventListener('mousedown', onInitialPointerMove);\n      document.removeEventListener('mouseup', onInitialPointerMove);\n      document.removeEventListener('pointermove', onInitialPointerMove);\n      document.removeEventListener('pointerdown', onInitialPointerMove);\n      document.removeEventListener('pointerup', onInitialPointerMove);\n      document.removeEventListener('touchmove', onInitialPointerMove);\n      document.removeEventListener('touchstart', onInitialPointerMove);\n      document.removeEventListener('touchend', onInitialPointerMove);\n    }\n\n    /**\n     * When the polfyill first loads, assume the user is in keyboard modality.\n     * If any event is received from a pointing device (e.g. mouse, pointer,\n     * touch), turn off keyboard modality.\n     * This accounts for situations where focus enters the page from the URL bar.\n     * @param {Event} e\n     */\n    function onInitialPointerMove(e) {\n      // Work around a Safari quirk that fires a mousemove on <html> whenever the\n      // window blurs, even if you're tabbing out of the page. ¯\\_(ツ)_/¯\n      if (e.target.nodeName && e.target.nodeName.toLowerCase() === 'html') {\n        return;\n      }\n\n      hadKeyboardEvent = false;\n      removeInitialPointerMoveListeners();\n    }\n\n    // For some kinds of state, we are interested in changes at the global scope\n    // only. For example, global pointer input, global key presses and global\n    // visibility change should affect the state at every scope:\n    document.addEventListener('keydown', onKeyDown, true);\n    document.addEventListener('mousedown', onPointerDown, true);\n    document.addEventListener('pointerdown', onPointerDown, true);\n    document.addEventListener('touchstart', onPointerDown, true);\n    document.addEventListener('visibilitychange', onVisibilityChange, true);\n\n    addInitialPointerMoveListeners();\n\n    // For focus and blur, we specifically care about state changes in the local\n    // scope. This is because focus / blur events that originate from within a\n    // shadow root are not re-dispatched from the host element if it was already\n    // the active element in its own scope:\n    scope.addEventListener('focus', onFocus, true);\n    scope.addEventListener('blur', onBlur, true);\n\n    // We detect that a node is a ShadowRoot by ensuring that it is a\n    // DocumentFragment and also has a host property. This check covers native\n    // implementation and polyfill implementation transparently. If we only cared\n    // about the native implementation, we could just check if the scope was\n    // an instance of a ShadowRoot.\n    if (scope.nodeType === Node.DOCUMENT_FRAGMENT_NODE && scope.host) {\n      // Since a ShadowRoot is a special kind of DocumentFragment, it does not\n      // have a root element to add a class to. So, we add this attribute to the\n      // host element instead:\n      scope.host.setAttribute('data-js-focus-visible', '');\n    } else if (scope.nodeType === Node.DOCUMENT_NODE) {\n      document.documentElement.classList.add('js-focus-visible');\n    }\n  }\n\n  // It is important to wrap all references to global window and document in\n  // these checks to support server-side rendering use cases\n  // @see https://github.com/WICG/focus-visible/issues/199\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    // Make the polyfill helper globally available. This can be used as a signal\n    // to interested libraries that wish to coordinate with the polyfill for e.g.,\n    // applying the polyfill to a shadow root:\n    window.applyFocusVisiblePolyfill = applyFocusVisiblePolyfill;\n\n    // Notify interested libraries of the polyfill's presence, in case the\n    // polyfill was loaded lazily:\n    var event;\n\n    try {\n      event = new CustomEvent('focus-visible-polyfill-ready');\n    } catch (error) {\n      // IE11 does not support using CustomEvent as a constructor directly:\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent('focus-visible-polyfill-ready', false, false, {});\n    }\n\n    window.dispatchEvent(event);\n  }\n\n  if (typeof document !== 'undefined') {\n    // Apply the polyfill to the global document, so that no JavaScript\n    // coordination is required to use the polyfill in the top-level document:\n    applyFocusVisiblePolyfill(document);\n  }\n\n})));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}